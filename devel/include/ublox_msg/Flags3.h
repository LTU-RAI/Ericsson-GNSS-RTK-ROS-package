// Generated by gencpp from file ublox_msg/Flags3.msg
// DO NOT EDIT!


#ifndef UBLOX_MSG_MESSAGE_FLAGS3_H
#define UBLOX_MSG_MESSAGE_FLAGS3_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ublox_msg
{
template <class ContainerAllocator>
struct Flags3_
{
  typedef Flags3_<ContainerAllocator> Type;

  Flags3_()
    : invalid_llh(0)
    , last_correction_arg(0)  {
    }
  Flags3_(const ContainerAllocator& _alloc)
    : invalid_llh(0)
    , last_correction_arg(0)  {
  (void)_alloc;
    }



   typedef uint8_t _invalid_llh_type;
  _invalid_llh_type invalid_llh;

   typedef uint8_t _last_correction_arg_type;
  _last_correction_arg_type last_correction_arg;





  typedef boost::shared_ptr< ::ublox_msg::Flags3_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msg::Flags3_<ContainerAllocator> const> ConstPtr;

}; // struct Flags3_

typedef ::ublox_msg::Flags3_<std::allocator<void> > Flags3;

typedef boost::shared_ptr< ::ublox_msg::Flags3 > Flags3Ptr;
typedef boost::shared_ptr< ::ublox_msg::Flags3 const> Flags3ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox_msg::Flags3_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox_msg::Flags3_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ublox_msg::Flags3_<ContainerAllocator1> & lhs, const ::ublox_msg::Flags3_<ContainerAllocator2> & rhs)
{
  return lhs.invalid_llh == rhs.invalid_llh &&
    lhs.last_correction_arg == rhs.last_correction_arg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ublox_msg::Flags3_<ContainerAllocator1> & lhs, const ::ublox_msg::Flags3_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ublox_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ublox_msg::Flags3_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msg::Flags3_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msg::Flags3_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msg::Flags3_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msg::Flags3_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msg::Flags3_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox_msg::Flags3_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e8cc36ed1be1b6280adb272bbb2c637";
  }

  static const char* value(const ::ublox_msg::Flags3_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e8cc36ed1be1b62ULL;
  static const uint64_t static_value2 = 0x80adb272bbb2c637ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msg::Flags3_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox_msg/Flags3";
  }

  static const char* value(const ::ublox_msg::Flags3_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox_msg::Flags3_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 invalid_llh\n"
"uint8 last_correction_arg\n"
;
  }

  static const char* value(const ::ublox_msg::Flags3_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox_msg::Flags3_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.invalid_llh);
      stream.next(m.last_correction_arg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Flags3_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msg::Flags3_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox_msg::Flags3_<ContainerAllocator>& v)
  {
    s << indent << "invalid_llh: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.invalid_llh);
    s << indent << "last_correction_arg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.last_correction_arg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSG_MESSAGE_FLAGS3_H
