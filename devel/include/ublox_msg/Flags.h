// Generated by gencpp from file ublox_msg/Flags.msg
// DO NOT EDIT!


#ifndef UBLOX_MSG_MESSAGE_FLAGS_H
#define UBLOX_MSG_MESSAGE_FLAGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ublox_msg
{
template <class ContainerAllocator>
struct Flags_
{
  typedef Flags_<ContainerAllocator> Type;

  Flags_()
    : gnss_fix_ok(0)
    , diff_soln(0)
    , psm_state(0)
    , head_veh_valid(0)
    , carr_soln(0)  {
    }
  Flags_(const ContainerAllocator& _alloc)
    : gnss_fix_ok(0)
    , diff_soln(0)
    , psm_state(0)
    , head_veh_valid(0)
    , carr_soln(0)  {
  (void)_alloc;
    }



   typedef uint8_t _gnss_fix_ok_type;
  _gnss_fix_ok_type gnss_fix_ok;

   typedef uint8_t _diff_soln_type;
  _diff_soln_type diff_soln;

   typedef uint8_t _psm_state_type;
  _psm_state_type psm_state;

   typedef uint8_t _head_veh_valid_type;
  _head_veh_valid_type head_veh_valid;

   typedef uint8_t _carr_soln_type;
  _carr_soln_type carr_soln;





  typedef boost::shared_ptr< ::ublox_msg::Flags_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msg::Flags_<ContainerAllocator> const> ConstPtr;

}; // struct Flags_

typedef ::ublox_msg::Flags_<std::allocator<void> > Flags;

typedef boost::shared_ptr< ::ublox_msg::Flags > FlagsPtr;
typedef boost::shared_ptr< ::ublox_msg::Flags const> FlagsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox_msg::Flags_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox_msg::Flags_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ublox_msg::Flags_<ContainerAllocator1> & lhs, const ::ublox_msg::Flags_<ContainerAllocator2> & rhs)
{
  return lhs.gnss_fix_ok == rhs.gnss_fix_ok &&
    lhs.diff_soln == rhs.diff_soln &&
    lhs.psm_state == rhs.psm_state &&
    lhs.head_veh_valid == rhs.head_veh_valid &&
    lhs.carr_soln == rhs.carr_soln;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ublox_msg::Flags_<ContainerAllocator1> & lhs, const ::ublox_msg::Flags_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ublox_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ublox_msg::Flags_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msg::Flags_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msg::Flags_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msg::Flags_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msg::Flags_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msg::Flags_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox_msg::Flags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39ad5f2ba8a2aba6964661231bc123cb";
  }

  static const char* value(const ::ublox_msg::Flags_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39ad5f2ba8a2aba6ULL;
  static const uint64_t static_value2 = 0x964661231bc123cbULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msg::Flags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox_msg/Flags";
  }

  static const char* value(const ::ublox_msg::Flags_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox_msg::Flags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8   gnss_fix_ok\n"
"uint8   diff_soln\n"
"uint8   psm_state\n"
"uint8   head_veh_valid\n"
"uint8   carr_soln\n"
;
  }

  static const char* value(const ::ublox_msg::Flags_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox_msg::Flags_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gnss_fix_ok);
      stream.next(m.diff_soln);
      stream.next(m.psm_state);
      stream.next(m.head_veh_valid);
      stream.next(m.carr_soln);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Flags_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msg::Flags_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox_msg::Flags_<ContainerAllocator>& v)
  {
    s << indent << "gnss_fix_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gnss_fix_ok);
    s << indent << "diff_soln: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.diff_soln);
    s << indent << "psm_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.psm_state);
    s << indent << "head_veh_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.head_veh_valid);
    s << indent << "carr_soln: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.carr_soln);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSG_MESSAGE_FLAGS_H
