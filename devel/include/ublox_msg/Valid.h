// Generated by gencpp from file ublox_msg/Valid.msg
// DO NOT EDIT!


#ifndef UBLOX_MSG_MESSAGE_VALID_H
#define UBLOX_MSG_MESSAGE_VALID_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ublox_msg
{
template <class ContainerAllocator>
struct Valid_
{
  typedef Valid_<ContainerAllocator> Type;

  Valid_()
    : valid_date(0)
    , valid_time(0)
    , fully_resolved(0)
    , valid_mag(0)  {
    }
  Valid_(const ContainerAllocator& _alloc)
    : valid_date(0)
    , valid_time(0)
    , fully_resolved(0)
    , valid_mag(0)  {
  (void)_alloc;
    }



   typedef uint8_t _valid_date_type;
  _valid_date_type valid_date;

   typedef uint8_t _valid_time_type;
  _valid_time_type valid_time;

   typedef uint8_t _fully_resolved_type;
  _fully_resolved_type fully_resolved;

   typedef uint8_t _valid_mag_type;
  _valid_mag_type valid_mag;





  typedef boost::shared_ptr< ::ublox_msg::Valid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msg::Valid_<ContainerAllocator> const> ConstPtr;

}; // struct Valid_

typedef ::ublox_msg::Valid_<std::allocator<void> > Valid;

typedef boost::shared_ptr< ::ublox_msg::Valid > ValidPtr;
typedef boost::shared_ptr< ::ublox_msg::Valid const> ValidConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox_msg::Valid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox_msg::Valid_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ublox_msg::Valid_<ContainerAllocator1> & lhs, const ::ublox_msg::Valid_<ContainerAllocator2> & rhs)
{
  return lhs.valid_date == rhs.valid_date &&
    lhs.valid_time == rhs.valid_time &&
    lhs.fully_resolved == rhs.fully_resolved &&
    lhs.valid_mag == rhs.valid_mag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ublox_msg::Valid_<ContainerAllocator1> & lhs, const ::ublox_msg::Valid_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ublox_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ublox_msg::Valid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msg::Valid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msg::Valid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msg::Valid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msg::Valid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msg::Valid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox_msg::Valid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d4c8f5850936f678663f76109e6b589";
  }

  static const char* value(const ::ublox_msg::Valid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d4c8f5850936f67ULL;
  static const uint64_t static_value2 = 0x8663f76109e6b589ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msg::Valid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox_msg/Valid";
  }

  static const char* value(const ::ublox_msg::Valid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox_msg::Valid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 valid_date\n"
"uint8 valid_time\n"
"uint8 fully_resolved\n"
"uint8 valid_mag\n"
;
  }

  static const char* value(const ::ublox_msg::Valid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox_msg::Valid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.valid_date);
      stream.next(m.valid_time);
      stream.next(m.fully_resolved);
      stream.next(m.valid_mag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Valid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msg::Valid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox_msg::Valid_<ContainerAllocator>& v)
  {
    s << indent << "valid_date: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid_date);
    s << indent << "valid_time: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid_time);
    s << indent << "fully_resolved: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fully_resolved);
    s << indent << "valid_mag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid_mag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSG_MESSAGE_VALID_H
