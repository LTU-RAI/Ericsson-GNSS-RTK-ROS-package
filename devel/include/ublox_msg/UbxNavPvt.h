// Generated by gencpp from file ublox_msg/UbxNavPvt.msg
// DO NOT EDIT!


#ifndef UBLOX_MSG_MESSAGE_UBXNAVPVT_H
#define UBLOX_MSG_MESSAGE_UBXNAVPVT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ublox_msg/Valid.h>
#include <ublox_msg/Flags.h>
#include <ublox_msg/Flags2.h>
#include <ublox_msg/Flags3.h>

namespace ublox_msg
{
template <class ContainerAllocator>
struct UbxNavPvt_
{
  typedef UbxNavPvt_<ContainerAllocator> Type;

  UbxNavPvt_()
    : i_tow(0)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , min(0)
    , sec(0)
    , valid_data()
    , t_acc(0)
    , nano(0)
    , fix_type(0)
    , flags_data()
    , flags2_data()
    , num_sv(0)
    , lon(0.0)
    , lat(0.0)
    , height(0.0)
    , h_msl(0)
    , h_acc(0)
    , v_acc(0)
    , vel_n(0)
    , vel_e(0)
    , vel_d(0)
    , g_speed(0)
    , head_mot(0)
    , s_acc(0)
    , head_acc(0)
    , p_dop(0)
    , flags3_data()
    , reserved0()
    , head_veh(0)
    , mag_dec(0)
    , mag_acc(0)  {
      reserved0.assign(0);
  }
  UbxNavPvt_(const ContainerAllocator& _alloc)
    : i_tow(0)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , min(0)
    , sec(0)
    , valid_data(_alloc)
    , t_acc(0)
    , nano(0)
    , fix_type(0)
    , flags_data(_alloc)
    , flags2_data(_alloc)
    , num_sv(0)
    , lon(0.0)
    , lat(0.0)
    , height(0.0)
    , h_msl(0)
    , h_acc(0)
    , v_acc(0)
    , vel_n(0)
    , vel_e(0)
    , vel_d(0)
    , g_speed(0)
    , head_mot(0)
    , s_acc(0)
    , head_acc(0)
    , p_dop(0)
    , flags3_data(_alloc)
    , reserved0()
    , head_veh(0)
    , mag_dec(0)
    , mag_acc(0)  {
  (void)_alloc;
      reserved0.assign(0);
  }



   typedef uint32_t _i_tow_type;
  _i_tow_type i_tow;

   typedef uint16_t _year_type;
  _year_type year;

   typedef uint8_t _month_type;
  _month_type month;

   typedef uint8_t _day_type;
  _day_type day;

   typedef uint8_t _hour_type;
  _hour_type hour;

   typedef uint8_t _min_type;
  _min_type min;

   typedef uint8_t _sec_type;
  _sec_type sec;

   typedef  ::ublox_msg::Valid_<ContainerAllocator>  _valid_data_type;
  _valid_data_type valid_data;

   typedef uint32_t _t_acc_type;
  _t_acc_type t_acc;

   typedef int32_t _nano_type;
  _nano_type nano;

   typedef uint8_t _fix_type_type;
  _fix_type_type fix_type;

   typedef  ::ublox_msg::Flags_<ContainerAllocator>  _flags_data_type;
  _flags_data_type flags_data;

   typedef  ::ublox_msg::Flags2_<ContainerAllocator>  _flags2_data_type;
  _flags2_data_type flags2_data;

   typedef uint8_t _num_sv_type;
  _num_sv_type num_sv;

   typedef double _lon_type;
  _lon_type lon;

   typedef double _lat_type;
  _lat_type lat;

   typedef double _height_type;
  _height_type height;

   typedef int32_t _h_msl_type;
  _h_msl_type h_msl;

   typedef uint32_t _h_acc_type;
  _h_acc_type h_acc;

   typedef uint32_t _v_acc_type;
  _v_acc_type v_acc;

   typedef int32_t _vel_n_type;
  _vel_n_type vel_n;

   typedef int32_t _vel_e_type;
  _vel_e_type vel_e;

   typedef int32_t _vel_d_type;
  _vel_d_type vel_d;

   typedef int32_t _g_speed_type;
  _g_speed_type g_speed;

   typedef int32_t _head_mot_type;
  _head_mot_type head_mot;

   typedef uint32_t _s_acc_type;
  _s_acc_type s_acc;

   typedef uint32_t _head_acc_type;
  _head_acc_type head_acc;

   typedef uint16_t _p_dop_type;
  _p_dop_type p_dop;

   typedef  ::ublox_msg::Flags3_<ContainerAllocator>  _flags3_data_type;
  _flags3_data_type flags3_data;

   typedef boost::array<uint8_t, 4>  _reserved0_type;
  _reserved0_type reserved0;

   typedef int32_t _head_veh_type;
  _head_veh_type head_veh;

   typedef int16_t _mag_dec_type;
  _mag_dec_type mag_dec;

   typedef uint16_t _mag_acc_type;
  _mag_acc_type mag_acc;





  typedef boost::shared_ptr< ::ublox_msg::UbxNavPvt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msg::UbxNavPvt_<ContainerAllocator> const> ConstPtr;

}; // struct UbxNavPvt_

typedef ::ublox_msg::UbxNavPvt_<std::allocator<void> > UbxNavPvt;

typedef boost::shared_ptr< ::ublox_msg::UbxNavPvt > UbxNavPvtPtr;
typedef boost::shared_ptr< ::ublox_msg::UbxNavPvt const> UbxNavPvtConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox_msg::UbxNavPvt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox_msg::UbxNavPvt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ublox_msg::UbxNavPvt_<ContainerAllocator1> & lhs, const ::ublox_msg::UbxNavPvt_<ContainerAllocator2> & rhs)
{
  return lhs.i_tow == rhs.i_tow &&
    lhs.year == rhs.year &&
    lhs.month == rhs.month &&
    lhs.day == rhs.day &&
    lhs.hour == rhs.hour &&
    lhs.min == rhs.min &&
    lhs.sec == rhs.sec &&
    lhs.valid_data == rhs.valid_data &&
    lhs.t_acc == rhs.t_acc &&
    lhs.nano == rhs.nano &&
    lhs.fix_type == rhs.fix_type &&
    lhs.flags_data == rhs.flags_data &&
    lhs.flags2_data == rhs.flags2_data &&
    lhs.num_sv == rhs.num_sv &&
    lhs.lon == rhs.lon &&
    lhs.lat == rhs.lat &&
    lhs.height == rhs.height &&
    lhs.h_msl == rhs.h_msl &&
    lhs.h_acc == rhs.h_acc &&
    lhs.v_acc == rhs.v_acc &&
    lhs.vel_n == rhs.vel_n &&
    lhs.vel_e == rhs.vel_e &&
    lhs.vel_d == rhs.vel_d &&
    lhs.g_speed == rhs.g_speed &&
    lhs.head_mot == rhs.head_mot &&
    lhs.s_acc == rhs.s_acc &&
    lhs.head_acc == rhs.head_acc &&
    lhs.p_dop == rhs.p_dop &&
    lhs.flags3_data == rhs.flags3_data &&
    lhs.reserved0 == rhs.reserved0 &&
    lhs.head_veh == rhs.head_veh &&
    lhs.mag_dec == rhs.mag_dec &&
    lhs.mag_acc == rhs.mag_acc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ublox_msg::UbxNavPvt_<ContainerAllocator1> & lhs, const ::ublox_msg::UbxNavPvt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ublox_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ublox_msg::UbxNavPvt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msg::UbxNavPvt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msg::UbxNavPvt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msg::UbxNavPvt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msg::UbxNavPvt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msg::UbxNavPvt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox_msg::UbxNavPvt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8c1d3ea328b86777476acb01b7d6bc4";
  }

  static const char* value(const ::ublox_msg::UbxNavPvt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8c1d3ea328b8677ULL;
  static const uint64_t static_value2 = 0x7476acb01b7d6bc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msg::UbxNavPvt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox_msg/UbxNavPvt";
  }

  static const char* value(const ::ublox_msg::UbxNavPvt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox_msg::UbxNavPvt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 i_tow\n"
"uint16 year\n"
"uint8  month\n"
"uint8  day\n"
"uint8  hour\n"
"uint8  min\n"
"uint8  sec\n"
"Valid  valid_data\n"
"uint32 t_acc\n"
"int32  nano\n"
"uint8  fix_type\n"
"Flags  flags_data\n"
"Flags2 flags2_data\n"
"uint8  num_sv\n"
"float64 lon\n"
"float64  lat\n"
"float64  height\n"
"int32  h_msl\n"
"uint32 h_acc\n"
"uint32 v_acc\n"
"int32  vel_n\n"
"int32  vel_e\n"
"int32  vel_d\n"
"int32  g_speed\n"
"int32  head_mot\n"
"uint32 s_acc\n"
"uint32 head_acc\n"
"uint16 p_dop\n"
"Flags3 flags3_data\n"
"uint8[4]  reserved0\n"
"int32  head_veh\n"
"int16  mag_dec\n"
"uint16 mag_acc\n"
"================================================================================\n"
"MSG: ublox_msg/Valid\n"
"uint8 valid_date\n"
"uint8 valid_time\n"
"uint8 fully_resolved\n"
"uint8 valid_mag\n"
"================================================================================\n"
"MSG: ublox_msg/Flags\n"
"uint8   gnss_fix_ok\n"
"uint8   diff_soln\n"
"uint8   psm_state\n"
"uint8   head_veh_valid\n"
"uint8   carr_soln\n"
"================================================================================\n"
"MSG: ublox_msg/Flags2\n"
"uint8 confirmed_avai\n"
"uint8 confirmed_date\n"
"uint8 confirmed_time\n"
"================================================================================\n"
"MSG: ublox_msg/Flags3\n"
"uint8 invalid_llh\n"
"uint8 last_correction_arg\n"
;
  }

  static const char* value(const ::ublox_msg::UbxNavPvt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox_msg::UbxNavPvt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.i_tow);
      stream.next(m.year);
      stream.next(m.month);
      stream.next(m.day);
      stream.next(m.hour);
      stream.next(m.min);
      stream.next(m.sec);
      stream.next(m.valid_data);
      stream.next(m.t_acc);
      stream.next(m.nano);
      stream.next(m.fix_type);
      stream.next(m.flags_data);
      stream.next(m.flags2_data);
      stream.next(m.num_sv);
      stream.next(m.lon);
      stream.next(m.lat);
      stream.next(m.height);
      stream.next(m.h_msl);
      stream.next(m.h_acc);
      stream.next(m.v_acc);
      stream.next(m.vel_n);
      stream.next(m.vel_e);
      stream.next(m.vel_d);
      stream.next(m.g_speed);
      stream.next(m.head_mot);
      stream.next(m.s_acc);
      stream.next(m.head_acc);
      stream.next(m.p_dop);
      stream.next(m.flags3_data);
      stream.next(m.reserved0);
      stream.next(m.head_veh);
      stream.next(m.mag_dec);
      stream.next(m.mag_acc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UbxNavPvt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msg::UbxNavPvt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox_msg::UbxNavPvt_<ContainerAllocator>& v)
  {
    s << indent << "i_tow: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.i_tow);
    s << indent << "year: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.year);
    s << indent << "month: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.month);
    s << indent << "day: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.day);
    s << indent << "hour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hour);
    s << indent << "min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.min);
    s << indent << "sec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sec);
    s << indent << "valid_data: ";
    s << std::endl;
    Printer< ::ublox_msg::Valid_<ContainerAllocator> >::stream(s, indent + "  ", v.valid_data);
    s << indent << "t_acc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.t_acc);
    s << indent << "nano: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nano);
    s << indent << "fix_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fix_type);
    s << indent << "flags_data: ";
    s << std::endl;
    Printer< ::ublox_msg::Flags_<ContainerAllocator> >::stream(s, indent + "  ", v.flags_data);
    s << indent << "flags2_data: ";
    s << std::endl;
    Printer< ::ublox_msg::Flags2_<ContainerAllocator> >::stream(s, indent + "  ", v.flags2_data);
    s << indent << "num_sv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_sv);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "h_msl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.h_msl);
    s << indent << "h_acc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.h_acc);
    s << indent << "v_acc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.v_acc);
    s << indent << "vel_n: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vel_n);
    s << indent << "vel_e: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vel_e);
    s << indent << "vel_d: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vel_d);
    s << indent << "g_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.g_speed);
    s << indent << "head_mot: ";
    Printer<int32_t>::stream(s, indent + "  ", v.head_mot);
    s << indent << "s_acc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.s_acc);
    s << indent << "head_acc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.head_acc);
    s << indent << "p_dop: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.p_dop);
    s << indent << "flags3_data: ";
    s << std::endl;
    Printer< ::ublox_msg::Flags3_<ContainerAllocator> >::stream(s, indent + "  ", v.flags3_data);
    s << indent << "reserved0[]" << std::endl;
    for (size_t i = 0; i < v.reserved0.size(); ++i)
    {
      s << indent << "  reserved0[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.reserved0[i]);
    }
    s << indent << "head_veh: ";
    Printer<int32_t>::stream(s, indent + "  ", v.head_veh);
    s << indent << "mag_dec: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mag_dec);
    s << indent << "mag_acc: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.mag_acc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSG_MESSAGE_UBXNAVPVT_H
